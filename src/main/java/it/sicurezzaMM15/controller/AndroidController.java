package it.sicurezzaMM15.controller;

import java.util.ArrayList;
import java.util.List;

import it.sicurezzaMM15.dao.connectAndSave;
import it.sicurezzaMM15.model.AllowAllHostnameError;
import it.sicurezzaMM15.model.Apk;
import it.sicurezzaMM15.model.HostnameVerifierError;
import it.sicurezzaMM15.model.SslHandlerError;
import it.sicurezzaMM15.model.TrustManagerError;
import it.sicurezzaMM15.model.JsonApp;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.WebApplicationContext;

@Controller
@Scope(WebApplicationContext.SCOPE_SESSION)
public class AndroidController {

	@RequestMapping(value = "/push", method = RequestMethod.POST)
    public void pushResult(@RequestParam(value="pkg", required=true) String pkg,
    					   @RequestParam(value="ver", required=true) String ver,
    					   @RequestParam(value="tmClass[]", required=false) String[] tmc,
    					   @RequestParam(value="tmVuln[]", required=false) String[] tmv,
    					   @RequestParam(value="hvClass[]", required=false) String[] hvc,
    					   @RequestParam(value="hvVuln[]", required=false) String[] hvv,
    					   @RequestParam(value="sslClass[]", required=false) String[] sslc,
    					   @RequestParam(value="sslVuln[]", required=false) String[] sslv,
    					   @RequestParam(value="aaClass[]", required=false) String[] aac) {
		Apk app = new Apk();
		app.setPackageName(pkg);
		app.setPackageVersion(ver);
		if(tmc != null && tmc.length > 0 && tmv != null && tmv.length > 0) {
			List<TrustManagerError> TME= new ArrayList<TrustManagerError>();
			for(int i=0; i<tmc.length; i++) {
				TrustManagerError tme = new TrustManagerError();
				tme.setClasses(tmc[i]);
				tme.setVuln(tmv[i]);
				TME.add(tme);
			}
			app.setTME(TME);
		}
		if(hvc != null && hvc.length > 0 && hvv != null && hvv.length > 0) {
			List<HostnameVerifierError> HVE= new ArrayList<HostnameVerifierError>();
			for(int i=0; i<hvc.length; i++) {
				HostnameVerifierError hve = new HostnameVerifierError();
				hve.setClasses(hvc[i]);
				hve.setVuln(hvv[i]);
				HVE.add(hve);
			}
			app.setHVE(HVE);
		}
		if(sslc != null && sslc.length > 0 && sslv != null && sslv.length > 0) {
			List<SslHandlerError> SSLE= new ArrayList<SslHandlerError>();
			for(int i=0; i<sslc.length; i++) {
				SslHandlerError ssle = new SslHandlerError();
				ssle.setClasses(sslc[i]);
				ssle.setVuln(sslv[i]);
				SSLE.add(ssle);
			}
			app.setSSLE(SSLE);
		}
		if(aac != null && aac.length > 0) {
			List<AllowAllHostnameError> AAE= new ArrayList<AllowAllHostnameError>();
			for(int i=0; i<aac.length; i++) {
				AllowAllHostnameError aae = new AllowAllHostnameError();
				aae.setClasses(aac[i]);
				AAE.add(aae);
			}
			app.setAAE(AAE);
		}
		connectAndSave android = new connectAndSave();
		android.saveOnDb(app);
		return;
	}
	
	@RequestMapping(value = "/pull", method = RequestMethod.GET)
    public @ResponseBody JsonApp getVulnerability(@RequestParam(value="pkg", required=true) String pkg,
			   									  @RequestParam(value="ver", required=true) String ver) {
		connectAndSave cs = new connectAndSave();
/*		String pkg = "com.whatsapp";
		String ver = "2.12.38";*/
		Apk app = cs.getVulnerability(pkg, ver);
		JsonApp toRet = new JsonApp();
		
		if(app == null) {
			return toRet;
		}
		toRet.setPkg(pkg);
		toRet.setVersion(ver);
		
		if(app.getTME() != null) {
			TrustManagerError[] tm = app.getTME().toArray(new TrustManagerError[app.getTME().size()]);
			toRet.setTm(tm);
		}
		
		if(app.getHVE() != null) {
			HostnameVerifierError[] hv = app.getHVE().toArray(new HostnameVerifierError[app.getHVE().size()]);
			toRet.setHv(hv);
		}
		
		if(app.getSSLE() != null) {
			SslHandlerError[] ssl = app.getSSLE().toArray(new SslHandlerError[app.getSSLE().size()]);
			toRet.setSsl(ssl);
		}
		
		if(app.getAAE() != null) {
			AllowAllHostnameError[] ah = app.getAAE().toArray(new AllowAllHostnameError[app.getAAE().size()]); 
			toRet.setAh(ah);
		}	
		return toRet;
	}
}
