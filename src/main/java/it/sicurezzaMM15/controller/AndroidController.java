package it.sicurezzaMM15.controller;

import java.util.ArrayList;
import java.util.List;

import it.sicurezzaMM15.dao.connectAndSave;
import it.sicurezzaMM15.model.AllowAllHostnameError;
import it.sicurezzaMM15.model.Apk;
import it.sicurezzaMM15.model.HostnameVerifierError;
import it.sicurezzaMM15.model.SslHandlerError;
import it.sicurezzaMM15.model.TrustManagerError;
import it.sicurezzaMM15.model.XmlDb;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

public class AndroidController {

	@RequestMapping(value = "/dowloadAllDb", method = RequestMethod.GET)
    public @ResponseBody XmlDb downloadAllDb() {
		//oppure farla in json
		return null;
	}
	
	@RequestMapping(value = "/push", method = RequestMethod.POST)
    public void pushResult(@RequestParam(value="pkg", required=true) String pkg,
    					   @RequestParam(value="ver", required=true) String ver,
    					   @RequestParam(value="tmClass[]", required=false) String[] tmc,
    					   @RequestParam(value="tmVuln[]", required=false) String[] tmv,
    					   @RequestParam(value="hvClass[]", required=false) String[] hvc,
    					   @RequestParam(value="hvVuln[]", required=false) String[] hvv,
    					   @RequestParam(value="sslClass[]", required=false) String[] sslc,
    					   @RequestParam(value="sslVuln[]", required=false) String[] sslv,
    					   @RequestParam(value="aaClass[]", required=false) String[] aac) {
		Apk app = new Apk();
		app.setPackageName(pkg);
		app.setPackageVersion(ver);
		List<TrustManagerError> TME= new ArrayList<TrustManagerError>();
		for(int i=0; i<tmc.length; i++) {
			TrustManagerError tme = new TrustManagerError();
			tme.setClasses(tmc[i]);
			tme.setVuln(tmv[i]);
			TME.add(tme);
		}
		app.setTME(TME);
		List<HostnameVerifierError> HVE= new ArrayList<HostnameVerifierError>();
		for(int i=0; i<hvc.length; i++) {
			HostnameVerifierError hve = new HostnameVerifierError();
			hve.setClasses(hvc[i]);
			hve.setVuln(hvv[i]);
			HVE.add(hve);
		}
		app.setHVE(HVE);
		List<SslHandlerError> SSLE= new ArrayList<SslHandlerError>();
		for(int i=0; i<sslc.length; i++) {
			SslHandlerError ssle = new SslHandlerError();
			ssle.setClasses(sslc[i]);
			ssle.setVuln(sslv[i]);
			SSLE.add(ssle);
		}
		app.setSSLE(SSLE);
		List<AllowAllHostnameError> AAE= new ArrayList<AllowAllHostnameError>();
		for(int i=0; i<aac.length; i++) {
			AllowAllHostnameError aae = new AllowAllHostnameError();
			aae.setClasses(aac[i]);
			AAE.add(aae);
		}
		app.setAAE(AAE);
		connectAndSave android = new connectAndSave();
		android.saveOnDb(app);
		return;
	}
	
	@RequestMapping(value = "/pull", method = RequestMethod.POST)
    public @ResponseBody XmlDb pullNewRows() {
		//oppure farla in json
		return null;
	}
}
