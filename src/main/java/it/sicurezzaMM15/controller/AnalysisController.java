package it.sicurezzaMM15.controller;

import it.sicurezzaMM15.dao.connectAndSave;
import it.sicurezzaMM15.model.AllowAllHostnameError;
import it.sicurezzaMM15.model.Apk;
import it.sicurezzaMM15.model.HostnameVerifierError;
import it.sicurezzaMM15.model.SslHandlerError;
import it.sicurezzaMM15.model.TrustManagerError;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.xmlpull.v1.XmlPullParserException;

import ASVD.ASVD;

public class AnalysisController {

	private Apk app = null;
	
    public AnalysisController() {
    	app = new Apk();
    }
    
    public Apk analyze(File serverFile) throws IOException, ParserConfigurationException, SAXException, XmlPullParserException {
   	 	//far partire la scansione
        ASVD.main(new String[] {"-f", serverFile.getAbsolutePath(), "-s", "-x", serverFile.getName()});
        //intercettare il risultato
        if(parseXmlResult(serverFile.getName()) == false) {
        	//Dire che non è stata eseguita la scansione
        }
        //salvare su db il risultato
        connectAndSave cs = new connectAndSave();
        cs.saveOnDb(app);
        //eliminare il file uppato
        serverFile.delete();
        //stampare il risultato a schermo
        return app;
    }
    
	private boolean parseXmlResult(String name) throws ParserConfigurationException, SAXException, IOException {
    	File fXmlFile = new File(System.getProperty("java.io.tmpdir") + File.separator + name + ".xml");
    	//se il file non esiste la scansione è fallita
    	if(!fXmlFile.exists()) return false;
    	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
    	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
    	Document doc = dBuilder.parse(fXmlFile);
     
    	//optional, but recommended
    	doc.getDocumentElement().normalize();
    	//parsing package and version of app
    	app.setPackageName(doc.getDocumentElement().getAttribute("package"));
    	app.setPackageVersion(doc.getDocumentElement().getAttribute("version"));
    	
    	//trust manager vulnerabilities
    	NodeList tm = doc.getElementsByTagName("TrustManagers");
    	NodeList tmchilds = tm.item(0).getChildNodes();
    	for(int tmp = 0; tmp < tmchilds.getLength(); tmp++) {
    		Node node = tmchilds.item(tmp);
    		if (node.getNodeType() == Node.ELEMENT_NODE) {
    			Element el = (Element) node;
    			TrustManagerError tmptm = new TrustManagerError();
    			tmptm.setClasses(el.getAttribute("class"));
    			tmptm.setVuln(el.getAttribute("status"));
    			app.addTME(tmptm);
    		}
    	}
    	
    	//hostname verifier
    	NodeList hn = doc.getElementsByTagName("HostnameVerifiers");
    	NodeList hnchilds = hn.item(0).getChildNodes();
    	for(int tmp = 0; tmp < hnchilds.getLength(); tmp++) {
    		Node node = hnchilds.item(tmp);
    		if (node.getNodeType() == Node.ELEMENT_NODE) {
    			Element el = (Element) node;
    			if(el.getTagName().equals("allowAllHostnames")) {
    				AllowAllHostnameError al = new AllowAllHostnameError();
    				al.setClasses(el.getAttribute("class"));
    				app.addAAE(al);
    			}
    			else {
    				HostnameVerifierError hv = new HostnameVerifierError();			
    				hv.setClasses(el.getAttribute("class"));
    				hv.setVuln(el.getAttribute("status"));
    				app.addHVE(hv);
    			}
    		}
    	}
    	NodeList ssl = doc.getElementsByTagName("SslHandlerErrors");
    	NodeList sslchilds = ssl.item(0).getChildNodes();
    	for(int tmp = 0; tmp < sslchilds.getLength(); tmp++) {
    		Node node = sslchilds.item(tmp);
    		if (node.getNodeType() == Node.ELEMENT_NODE) {
    			Element el = (Element) node;
    			SslHandlerError se = new SslHandlerError();
    			se.setClasses(el.getAttribute("class"));
    			se.setVuln(el.getAttribute("status"));
    			app.addSSLE(se);
    		}
    	}
    	return true;
    }



}
