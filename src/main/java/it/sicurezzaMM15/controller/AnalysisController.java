package it.sicurezzaMM15.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.xmlpull.v1.XmlPullParserException;
import ASVD.ASVD;

public class AnalysisController {

	private List<String> tmClass = null;
	private List<String> tmVuln = null;
	private List<String> hnClass = null;
	private List<String> hnVuln = null;
	private List<String> allowAll = null;
	private List<String> hSslErrClass = null;
	private List<String> hSslErrVuln = null;
	private String packageName = null;
	private String packageVersion = null;
	
    public AnalysisController() {
        //creo le liste di appoggio
        tmClass = new ArrayList<String>();
        tmVuln = new ArrayList<String>();
        hnClass = new ArrayList<String>();
        hnVuln = new ArrayList<String>();
        allowAll = new ArrayList<String>();
        hSslErrClass = new ArrayList<String>();
        hSslErrVuln = new ArrayList<String>();
    }
    
    public void analyze(File serverFile) throws IOException, ParserConfigurationException, SAXException, XmlPullParserException {
   	 	//far partire la scansione
        ASVD.main(new String[] {"-f", serverFile.getAbsolutePath(), "-s", "-x", serverFile.getName()});
        //intercettare il risultato
        if(parseXmlResult(serverFile.getName()) == false) {
        	//Dire che non è stata eseguita la scansione
        }
        //salvare su db il risultato
        //eliminare il file uppato
        serverFile.delete();
        //stampare il risultato a schermo
    }
    
	private boolean parseXmlResult(String name) throws ParserConfigurationException, SAXException, IOException {
    	File fXmlFile = new File(System.getProperty("java.io.tmpdir") + File.separator + name + ".xml");
    	//se il file non esiste la scansione è fallita
    	if(!fXmlFile.exists()) return false;
    	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
    	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
    	Document doc = dBuilder.parse(fXmlFile);
     
    	//optional, but recommended
    	doc.getDocumentElement().normalize();
    	//parsing package and version of app
    	packageName = doc.getDocumentElement().getAttribute("package");
    	packageVersion = doc.getDocumentElement().getAttribute("version");
    	System.out.println(packageName + packageVersion);
    	//trust manager vulnerabilities
    	NodeList tm = doc.getElementsByTagName("TrustManagers");
    	NodeList tmchilds = tm.item(0).getChildNodes();
    	for(int tmp = 0; tmp < tmchilds.getLength(); tmp++) {
    		Node node = tmchilds.item(tmp);
    		if (node.getNodeType() == Node.ELEMENT_NODE) {
    			Element el = (Element) node;
    			tmClass.add(el.getAttribute("class"));
    			tmVuln.add(el.getAttribute("status"));
    		}
    	}
    	NodeList hn = doc.getElementsByTagName("HostnameVerifiers");
    	NodeList hnchilds = hn.item(0).getChildNodes();
    	for(int tmp = 0; tmp < hnchilds.getLength(); tmp++) {
    		Node node = hnchilds.item(tmp);
    		if (node.getNodeType() == Node.ELEMENT_NODE) {
    			Element el = (Element) node;
    			if(el.getTagName().equals("allowAllHostnames")) {
    				allowAll.add(el.getAttribute("class"));
    			}
    			else {
    				hnClass.add(el.getAttribute("class"));
    				hnVuln.add(el.getAttribute("status"));
    			}
    		}
    	}
    	NodeList ssl = doc.getElementsByTagName("SslHandlerErrors");
    	NodeList sslchilds = ssl.item(0).getChildNodes();
    	for(int tmp = 0; tmp < sslchilds.getLength(); tmp++) {
    		Node node = sslchilds.item(tmp);
    		if (node.getNodeType() == Node.ELEMENT_NODE) {
    			Element el = (Element) node;
    			hSslErrClass.add(el.getAttribute("class"));
    			hSslErrVuln.add(el.getAttribute("status"));
    		}
    	}
    	return true;
    }

	public List<String> getTmClass() {
		return tmClass;
	}

	public List<String> getTmVuln() {
		return tmVuln;
	}

	public List<String> getHnClass() {
		return hnClass;
	}

	public List<String> getHnVuln() {
		return hnVuln;
	}

	public List<String> getAllowAll() {
		return allowAll;
	}

	public List<String> gethSslErrClass() {
		return hSslErrClass;
	}

	public List<String> gethSslErrVuln() {
		return hSslErrVuln;
	}

	public String getPackageName() {
		return packageName;
	}

	public String getPackageVersion() {
		return packageVersion;
	}

}
