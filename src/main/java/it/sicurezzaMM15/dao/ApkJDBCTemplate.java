package it.sicurezzaMM15.dao;

import java.util.List;

import it.sicurezzaMM15.mapper.AllowAllHostnameMapper;
import it.sicurezzaMM15.mapper.ApkMapper;
import it.sicurezzaMM15.mapper.HostnameVerifierMapper;
import it.sicurezzaMM15.mapper.SslHandlerMapper;
import it.sicurezzaMM15.mapper.TrustManagerMapper;
import it.sicurezzaMM15.model.AllowAllHostnameError;
import it.sicurezzaMM15.model.Apk;
import it.sicurezzaMM15.model.HostnameVerifierError;
import it.sicurezzaMM15.model.SslHandlerError;
import it.sicurezzaMM15.model.TrustManagerError;

import javax.sql.DataSource;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;

public class ApkJDBCTemplate implements VulnerabilityDAO {
	
	private DataSource dataSource;
	private JdbcTemplate jdbcTemplateObject;
   
    public DataSource getDataSource() {
		return dataSource;
	}

    public void setDataSource(DataSource dataSource) {
    	this.dataSource = dataSource;
    	this.jdbcTemplateObject = new JdbcTemplate(dataSource);
    }
    
	@SuppressWarnings("unchecked")
	public Apk getApp(String pk, String version) {
		try {
			String SQL = "select * from applications where (pk, version) = (?, ?)";
			Apk apk = (Apk) jdbcTemplateObject.queryForObject(SQL, new Object[]{pk, version}, new ApkMapper());
			SQL = "select * from trustManager where idApp = ?";
			List<TrustManagerError> tm = (List<TrustManagerError>) jdbcTemplateObject.query(SQL, new Object[]{apk.getId()}, new TrustManagerMapper());
			if(tm != null) {
				apk.setTME(tm);
			}
			SQL = "select * from hostNameVerifier where idApp = ?";
			List<HostnameVerifierError> hv = (List<HostnameVerifierError>) jdbcTemplateObject.query(SQL, new Object[]{apk.getId()}, new HostnameVerifierMapper());
			if(hv != null) {
				apk.setHVE(hv);
			}
			SQL = "select * from allowAllHostname where idApp = ?";
			List<AllowAllHostnameError> allowall = (List<AllowAllHostnameError>) jdbcTemplateObject.query(SQL, new Object[]{apk.getId()}, new AllowAllHostnameMapper());
			if(allowall != null) {
				apk.setAAE(allowall);
			}
			SQL = "select * from sslHandlerError where idApp = ?";
			List<SslHandlerError> ssle = (List<SslHandlerError>) jdbcTemplateObject.query(SQL, new Object[]{apk.getId()}, new SslHandlerMapper());
			if(ssle != null) {
				apk.setSSLE(ssle);
			}
			return apk;
		} catch (EmptyResultDataAccessException e) {
			return null;
		}		
	}

	public int getAppId(Apk app) {
		try {
			String SQL = "select * from applications where (pk, version) = (?, ?)";
			Apk apk = (Apk) jdbcTemplateObject.queryForObject(SQL, new Object[]{app.getPackageName(), app.getPackageVersion()}, new ApkMapper());
			return apk.getId();
		}catch (EmptyResultDataAccessException e) {
			return -1;
		}		
	}
	
	public void saveApp(Apk app) {
		String SQL = "insert into applications(pk, version) values (?, ?)";
		jdbcTemplateObject.update(SQL, new Object[] {app.getPackageName(), app.getPackageVersion()});
	    return;
	}

	public void addTmVul(int id , List<TrustManagerError> tm) {
		for(TrustManagerError tmp : tm) {
			String SQL = "insert into trustManager (idApp, class, result) values (?, ?, ?)";
		    jdbcTemplateObject.update(SQL, new Object[] {id, tmp.getClasses(), tmp.getVuln()});
		}
		return;
	}

	public void addHnVul(int id, List<HostnameVerifierError> hv) {
		for(HostnameVerifierError tmp : hv) {
			String SQL = "insert into hostNameVerifier (idApp, class, result) values (?, ?, ?)";
		    jdbcTemplateObject.update(SQL, new Object[] {id, tmp.getClasses(), tmp.getVuln()});
		}
		return;		
	}

	public void addAllowAllVul(int id, List<AllowAllHostnameError> aae) {
		for(AllowAllHostnameError tmp : aae) {
			String SQL = "insert into allowAllHostname (idApp, class) values (?, ?)";
		    jdbcTemplateObject.update(SQL, new Object[] {id, tmp.getClasses()});
		}
		return;	
	}

	public void addSslVul(int id, List<SslHandlerError> ssle) {
		for(SslHandlerError tmp : ssle) {
			String SQL = "insert into sslHandlerError (idApp, class, result) values (?, ?, ?)";
		    jdbcTemplateObject.update(SQL, new Object[] {id, tmp.getClasses(), tmp.getVuln()});
		}
		return;	
	}
}
