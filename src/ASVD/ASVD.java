package ASVD;

import java.io.IOException;
import java.util.List;

import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

import analysis.*;
/**
 * 
 * @author Simone Martucci
 * @author Mattia Mancini
 * 
 */
public final class ASVD {
	/**
	 * @param apkName: name of the file, read from command line
	 * @param xmlOutput: if true output will be formatted with xml syntax
	 * @param decompilerDirectory: directory where to store bytecode for analysis
	 * @param bytecode: object containing bytecode
	 */
	private static String apkName = null;
	private static boolean xmlOutput = false;
	private static String decompilerDirectory = null;
	private static DalvikAnalisys bytecode = null;
	
	public static void main(String[] args) throws IOException, ParserConfigurationException, SAXException {
		//read passed arguments
		parseArgs(args);
		if (apkName == null) {
			//print help
			printHelp();
		}
		//create new apk file
		APK file = new APK(apkName);
		//check file permission
		if(!file.getPermssion()) {
			//if file does not require internet access do not continue analysis
			System.out.println("App does not require INTERNET permission. No need to worry about SSL misuse... Abort!\n");
			//file.close();
			//System.exit(0);
		}
		//internet permission found so continue analysis
		System.out.println("INTERNET permission found, continue analysis...");
		System.out.println("Analize file: " + apkName);
		System.out.println("Package: " + file.getPackage() + ", Version: " + file.getVersion());
		
		//new dex file will be created to read the bytecode correctly
		//File dexFile = file.getDexFile();
		bytecode = new DalvikAnalisys(file.getDexFile(), file.getPackage(), decompilerDirectory);
		System.out.println("Decompilation of dex file finished");
		System.out.println("Beginning of analisys");
		//beginning of real analysis on the dex file
		bytecode.checkVulnerabilities();
		System.out.println("File analisys complete!");
		if(xmlOutput) {
			//Print output in xml file
			printXml();
		}
		else {
			//print normal output
			printConclusion();
		}
		//close apk then exit
		file.close();
		System.out.println("Exiting...");
		System.exit(0);		
	}
	/**
	 * Print the output in xml format
	 */
	private static final void printXml() {
		
	}
	/**
	 * Print output in console standard output
	 */
	private static final void printConclusion() {
		System.out.println("Showing results:");
		List<String> classes = bytecode.getTmClass();
		if(classes.isEmpty())
			System.out.println("TrustManager Vulnerabilities Not Found!");
		else {
			System.out.println("TrustManager Vulnerabilities found in Class:");
			for(int i = 0; i < classes.size(); i++) {
				System.out.println(classes.get(i)+": ");
				System.out.println("	Client side: " + bytecode.getClientTmVulnerability().get(i));
				System.out.println("	Server side: " + bytecode.getServerTmVulnerability().get(i));
			}
		}
		classes = bytecode.getHnClass();
		if(classes.isEmpty())
			System.out.println("HostnameVerifier Vulnerabilities Not Found!");
		else {
			System.out.println("HostnameVerifier Vulnerabilities found in Class:");
			for(int i = 0; i < classes.size(); i++) {
				System.out.println(classes.get(i)+": "+ bytecode.getHnVulnerability().get(i));
			}
		}
	}
	/**
	 * Show a little guide to use this program
	 */
	private static final void printHelp() {
		System.out.println("Usage: asvd [-f APK] , [--file APK] : APK File to check");
		System.out.println("Options:");
		System.out.println("   [-d DIR] , [--dir DIR] : Store decompiled App's Java code for further analysis in dir");
		System.out.println("   [-x] , [--xml] : Print output as XML");
		System.exit(0);
	}
	
	/**
	 * Utility to read the arguments in the correct way
	 * @param args : arguments passed
	 */
	private static void parseArgs(String[] args) {
		
		for(int i = 0; i < args.length; i++) {
			if(args[i].compareTo("-h") == 0 || args[i].compareTo("--help") == 0) {
				printHelp();
			}
			else if(args[i].compareTo("-x") == 0 || args[i].compareTo("--xml") == 0) xmlOutput = true;
			else if(args[i].compareTo("-d") == 0 || args[i].compareTo("--dir") == 0) {
				if(i < args.length -1 && !args[i+1].startsWith("-"))
					decompilerDirectory = args[i+1];
			}
			else if(args[i].compareTo("-f") == 0 || args[i].compareTo("--file") == 0) {
				if(i < args.length -1 && !args[i+1].startsWith("-"))
					apkName = args[i+1];
			}
		}
		
	}


}
