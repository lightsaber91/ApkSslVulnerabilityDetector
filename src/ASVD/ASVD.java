package ASVD;

import java.io.IOException;
import javax.xml.parsers.ParserConfigurationException;
import malScanner.mScanner;
import org.xml.sax.SAXException;
import org.xmlpull.v1.XmlPullParserException;
import util.Printer;
import analysis.*;
/**
 * 
 * @author Simone Martucci
 * @author Mattia Mancini
 * 
 */
public final class ASVD {
	/**
	 * @param apkName: name of the file, read from command line
	 * @param xmlOutput: if true output will be formatted with xml syntax
	 * @param decompilerDirectory: directory where to store bytecode for analysis
	 * @param bytecode: object containing bytecode
	 * @param showOnlyApkInfo: print just package name and version
	 * @param scanMalware: if true scan the app searching for malaware
	 */
	private static boolean scanMalware = true;
	private static boolean showOnlyApkInfo = false;
	private static String apkName = null;
	private static String decompilerDirectory = null;
	private static String xmlOutput = null;
	private static DalvikAnalisys bytecode = null;
	private static mScanner scanner = null;
	private static ErrorLists el = null;
	
	public static void main(String[] args) throws IOException, ParserConfigurationException, SAXException, XmlPullParserException {
		//read passed arguments
		parseArgs(args);
		if (apkName == null) {
			//print help
			Printer.printHelp();
		}
		if(scanMalware) {
			 scanner = new mScanner();
		}
		
		//create new apk file
		APK file = new APK(apkName, scanner);
				
		System.out.println("Analize file: " + apkName);
		System.out.println("Package: " + file.getPackage() + ", Version: " + file.getVersion());
		//check file permission
		if(!file.getPermssion()) {
			//if file does not require internet access do not continue analysis
			System.out.println("App does not require INTERNET permission. No need to worry about SSL misuse... Abort!\n");
			file.close();
			System.exit(0);
		}
		if(showOnlyApkInfo) {
			file.close();
			System.exit(0);
		}
		//internet permission found so continue analysis
		System.out.println("INTERNET permission found, continue analysis...");
		System.out.println("Decompiling DEX file...");
	
		//new dex file will be created to read the bytecode correctly
		bytecode = new DalvikAnalisys(file.getDexFile(), file.getPackage(), decompilerDirectory);
		System.out.println("Decompilation of DEX file finished");
		
		//beginning of real analysis on the dex file
		long startTime = System.currentTimeMillis();
		System.out.println("Beginning of analisys");
		//inizializing the error lists
		el = new ErrorLists();
		bytecode.checkVulnerabilities(el);
			
		if(scanMalware) {
			//Beginning of scan
			//TODO
			scanner.scanDex(file.getManifest());
		}
		
		double estimatedTime = (double) (System.currentTimeMillis() - startTime) / 1000;
		System.out.println("Apk analisys complete in " + estimatedTime +" seconds!\n");
		
		if(xmlOutput != null) {
			//Print output in xml file
			Printer.printXml(el, scanner, file.getPackage(), file.getVersion(), xmlOutput);
		}
		else {
			//print normal output
			Printer.printConclusion(el, scanner);
		}
		
		//close apk then exit
		file.close();
		System.out.println("Exiting...");
		System.exit(0);
	}

	/**
	 * Utility to read the arguments in the correct way
	 * @param args : arguments passed
	 */
	private static void parseArgs(String[] args) {
		
		for(int i = 0; i < args.length; i++) {
			if(args[i].compareTo("-h") == 0 || args[i].compareTo("--help") == 0) {
				Printer.printHelp();
			}
			else if(args[i].compareTo("-x") == 0 || args[i].compareTo("--xml") == 0) {
				if(i < args.length -1 && !args[i+1].startsWith("-"))
					xmlOutput = args[i+1];
				else {
					xmlOutput = "stdout";
				}
			}
			else if(args[i].compareTo("-d") == 0 || args[i].compareTo("--dir") == 0) {
				if(i < args.length -1 && !args[i+1].startsWith("-"))
					decompilerDirectory = args[i+1];
			}
			else if(args[i].compareTo("-f") == 0 || args[i].compareTo("--file") == 0) {
				if(i < args.length -1 && !args[i+1].startsWith("-"))
					apkName = args[i+1];
			}
			else if(args[i].compareTo("-i") == 0 || args[i].compareTo("--info") == 0) showOnlyApkInfo = true;
			else if(args[i].compareTo("-s") == 0 || args[i].compareTo("--scan") == 0) scanMalware = true;
				
		}
		
	}


}
