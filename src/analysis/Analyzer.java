package analysis;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;

import util.Const;

public class Analyzer {
	
	public Analyzer() {
		
	}

	public String searchTmVulnerabilities(BufferedReader reader) throws IOException {
		String line;
		while(!(line = reader.readLine()).equals(Const.END)) {
			if(line.contains(Const.INVOKE)) {
				return Const.MAYBE;
			}
			else if (line.contains(Const.VOID)) return Const.VULNERABLE;
		}
		return Const.NOT_VULNERABLE;
	}
	
	public String searchSslErrorVulnerabilities(BufferedReader reader) throws IOException {
		String line;
		boolean proceed = false;
		boolean cancel = false;
		while(!(line = reader.readLine()).equals(Const.END)) {
			if(line.contains(Const.PROCEED))
				proceed = true;
			else if (line.contains(Const.CANCEL)) 
				cancel = true;
		}
		if(cancel && proceed)
			return Const.MAYBE;
		else if(proceed) 
			return Const.VULNERABLE;
		else if(!cancel && !proceed)
			return Const.MAYBE;
		return Const.NOT_VULNERABLE;
	}
	
	public String searchHnVulnerabilities(String name, List<File> list, BufferedReader r, ErrorLists el) throws IOException {
		if (r != null) {
			String line;
			boolean defTrue = false;
			while(!(line = r.readLine()).equals(Const.END)) {
				if(line.contains(Const.INVOKE)) {
					return Const.MAYBE;
				}
				if(line.contains(Const.DEF_TRUE)) {
						defTrue = true;
				}
				if(line.contains(Const.RET_V0) && defTrue) {
					return Const.VULNERABLE;
				}
			}
			return Const.NOT_VULNERABLE;
		}
		else {
			for(File file : list) {
				if(file.getName().contains(name)) {
					String line;
					BufferedReader reader = new BufferedReader(new FileReader(file));
					while((line = reader.readLine()) != null) {
						if(line.contains(Const.VERIFY) && line.contains(Const.METHOD) && line.contains(Const.SSL_SESSION)) {
							reader.mark(1000);
							while(!(line = reader.readLine()).equals(Const.END)) {
								if(line.contains(Const.INVOKE)) {
									el.setHnClass(file.getPath());
									reader.close();
									return Const.MAYBE;
								}
							}
							reader.reset();
							boolean defTrue = false;
							line = "";
							while(!(line = reader.readLine()).equals(Const.END)) {
								if(line.contains(Const.DEF_TRUE)) {
									defTrue = true;
								}
								if(line.contains(Const.RET_V0) && defTrue) {
									el.setHnClass(file.getPath());
									reader.close();
									return Const.VULNERABLE;
								}
							}
							reader.close();
							return Const.NOT_VULNERABLE;
						}
					}
					reader.close();
				}
			}
		}
		return null;
	}
}
