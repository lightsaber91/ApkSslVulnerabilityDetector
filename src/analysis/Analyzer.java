package analysis;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import util.Const;

/**
 * 
 * @author Simone Martucci
 * @author Mattia Mancini
 *
 * This class analyze a files searching for vulnerabilities
 */

public class Analyzer {
	
	/**
	 * Contructor
	 */
	public Analyzer() {
		
	}

	/**
	 * 
	 * @param filename: name of class to check if invoked
	 * @param filelist: list of all files
	 * @return true if the function is invoked
	 * @throws IOException
	 */
	public boolean checkIfInvoked(String filename, List<File> filelist) throws IOException {
		for(File file : filelist) {
			String line;
			BufferedReader reader = new BufferedReader(new FileReader(file));
			while((line = reader.readLine()) != null) {
				if((line.contains(Const.INSTANCE) || line.contains(Const.INVOKE)) && line.contains(filename)) {
					reader.close();
					return true;
				}
			}
			reader.close();
		}
		return false;
	}

	/**
	 * Search vulnerabilities concerning the trust manager
	 * 
	 * @param reader: position from where we start to analyze the file
	 * @return a strng that tells if file contains vulnerability or not
	 * @throws IOException
	 */
	public String searchTmVulnerabilities(BufferedReader reader) throws IOException {
		String line;
		while(!(line = reader.readLine()).equals(Const.END)) {
			if(line.contains(Const.INVOKE)) {
				return Const.MAYBE;
			}
			else if (line.contains(Const.VOID)) return Const.VULNERABLE;
		}
		return Const.NOT_VULNERABLE;
	}
	
	/**
	 * Search vulnerabilities concerning the ssl error handler
	 * 
	 * @param reader: position from where we start to analyze the file
	 * @return a strng that tells if file contains vulnerability or not
	 * @throws IOException
	 */
	public String searchSslErrorVulnerabilities(BufferedReader reader) throws IOException {
		String line;
		boolean proceed = false;
		boolean cancel = false;
		while(!(line = reader.readLine()).equals(Const.END)) {
			if(line.contains(Const.PROCEED))
				proceed = true;
			else if (line.contains(Const.CANCEL)) 
				cancel = true;
		}
		if(cancel && proceed)
			return Const.MAYBE;
		else if(proceed) 
			return Const.VULNERABLE;
		else if(!cancel && !proceed)
			return Const.MAYBE;
		return Const.NOT_VULNERABLE;
	}
	
	/**
	 * Search vulnerabilities concerning hostname verifier
	 * 
	 * @param name: name of the file that contains a trust manager
	 * @param list: list of every smali file
	 * @param r: position from where we start to analyze the file
	 * @param el: error list where to store the vulnerabilities
	 * @return a strng that tells if file contains vulnerability or not
	 * @throws IOException
	 */
	public String searchHnVulnerabilities(BufferedReader r) throws IOException {
		String line;
		boolean defTrue = false;
		while(!(line = r.readLine()).equals(Const.END)) {
			if(line.contains(Const.INVOKE)) {
				return Const.MAYBE;
			}
			if(line.contains(Const.DEF_TRUE)) {
					defTrue = true;
			}
			if(line.contains(Const.RET_V0) && defTrue) {
				return Const.VULNERABLE;
			}
		}
		return Const.NOT_VULNERABLE;
	}
}
