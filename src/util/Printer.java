package util;

import java.util.List;

import analysis.ErrorLists;

public class Printer {

	/**
	 * Show a little guide to use this program
	 */
	public static final void printHelp() {
		System.out.println("Usage: asvd [-f APK] , [--file APK] : APK File to check");
		System.out.println("Options:");
		System.out.println("   [-d DIR] , [--dir DIR] : Store decompiled App's Java code for further analysis in dir");
		System.out.println("   [-x] , [--xml] : Print output as XML");
		System.out.println("   [-i] , [--info] : Print only APK info like package and version");
		System.out.println("   [-s] , [--scan] : Scan the APK to search malaware");
		System.exit(0);
	}
	
	/**
	 * Print the output in xml format and save to disk
	 */
	public static final void printXml(ErrorLists errors) {
		//TODO
	}
	
	/**
	 * Print output in console standard output
	 */
	public static final void printConclusion(ErrorLists errors) {
		System.out.println("Showing results:");
		List<String> classes = errors.getTmClass();
		if(classes.isEmpty())
			System.out.println("TrustManager Vulnerabilities Not Found!\n");
		else {
			System.out.println("TrustManager Vulnerabilities found in Class:");
			for(int i = 0; i < classes.size(); i++) {
				System.out.println(classes.get(i)+": ");
				System.out.println("	Client side: " + errors.getClientTmVulnerability().get(i));
				System.out.println("	Server side: " + errors.getServerTmVulnerability().get(i));
			}
			System.out.println();
		}
		classes = errors.getHnClass();
		if(classes.isEmpty()) 
			System.out.println("HostnameVerifier Vulnerabilities Not Found!\n");
		else {
			System.out.println("HostnameVerifier Vulnerabilities found in Class:");
			for(int i = 0; i < classes.size(); i++) {
				System.out.println("	" + classes.get(i)+": "+ errors.getHnVulnerability().get(i));
			}
			System.out.println();
		}
		classes = errors.getAllowedHnVerifier();
		if(classes.isEmpty()) 
			System.out.println("No ALLOW_ALL_HOSTNAME_VERIFIER found!\n");
		else {
			System.out.println("ALLOW_ALL_HOSTNAME_VERIFIER found in class:");
			for(int i = 0; i < classes.size(); i++) {
				System.out.println("	" + classes.get(i));
			}
			System.out.println();
		}
		classes = errors.getSslhandleClass();
		if(classes.isEmpty())
			System.out.println("SslErrorHandler Vulnerabilities Not Found!\n");
		else {
			System.out.println("SslErrorHandler Vulnerabilities found in Class:");
			for(int i = 0; i < classes.size(); i++) {
				System.out.println("	" + classes.get(i)+": "+ errors.getSslhandleVulnerability().get(i));
			}
			System.out.println();
		}
	}
	
}
