package bytecode;

import org.jf.baksmali.*;

import smali.EntryPoint;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class DalvikAnalisys {
	
	private static final String TRUST_MANAGER = "TrustManager";
	private static final String HOSTNAME = "HostnameVerifier";
	private static final String SOCKET_FATORY = "ALLOW_ALL_HOSTNAME_VERIFIER"; //TODO vedere se Ã¨ questa la stringa
	private static final String VULNERABLE = "Vulnerable";
	private static final String NOT_VULNERABLE = "Not Vulnerable";
	private static final String MAYBE = "Maybe Vulnerable";
	private static final String SERVER_FUNCTION = "checkServerTrusted";
	private static final String CLIENT_FUNCTION = "checkClientTrusted";
	private static final String END = ".end method";
	private static final String VOID = "return-void";
	private static final String GOTO = ":goto";
	private static final String SMALI = ".smali";
	
	private static String directory = null;
	private static File root = null;
	
	private static String tmClientVulnerable = null;
	private static String tmServerVulnerable = null;
	
	public DalvikAnalisys(File dexClass, String packageName, String decompilerDir) throws IOException {
		
		if(decompilerDir == null) directory = "/tmp/smali/" + packageName; 
		else directory = decompilerDir;
		
		//Qui parte baksmali che converte il dex in smali
		String[] smaliArgs = {"-o", directory, dexClass.getPath().toString()};
		main.main(smaliArgs);
		System.out.println("Decompilation of dex file finished");
		System.out.println("Beginning of analisys");
		
		root = new File(directory);
		
		//Qui parte smali2java che ci converte ogni .smali in .java
		//EntryPoint.main(smaliArgs[1], "/tmp/smali2java/"+packageName);
		//System.out.println("smali2java finished");
	}
	
	public void checkTrustManagerFile() {
		
		List<File> filelist = new ArrayList<File>();
		getFileList(root, filelist, TRUST_MANAGER);
		if(filelist.isEmpty()) {
			System.out.println("Class named TrustManager not found...");
			System.out.println("Beginning all file analysis...");
			getAllFileList(root,filelist);
		}
		for (File file : filelist) {
			System.out.println(file.getPath().toString());
			try {
				BufferedReader reader = new BufferedReader(new FileReader(file));
				String line;
				boolean[] checked = {false , false};
				while ((line = reader.readLine()) != null) {
					if(line.contains(SERVER_FUNCTION) && !checked[0]) {
						tmServerVulnerable = analyseFileBytecode(reader);
						checked[0] = true;
					}
					else if(line.contains(CLIENT_FUNCTION) && !checked[1]) {
						tmClientVulnerable = analyseFileBytecode(reader);
						checked[1] = true;
					}
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		if(tmServerVulnerable == null) tmServerVulnerable = NOT_VULNERABLE;
		if(tmClientVulnerable == null) tmClientVulnerable = NOT_VULNERABLE;
		return;
	}
	
	private String analyseFileBytecode(BufferedReader reader) throws IOException {
		String line;
		while(!(line = reader.readLine()).equals(END)) {
			if(line.contains(GOTO)) {
				String tmp;
				BufferedReader ap = reader;
				tmp = ap.readLine();
				if(tmp.contains(VOID)) return MAYBE;
			}
			else if (line.contains(VOID)) return VULNERABLE;
		}
		return NOT_VULNERABLE;
	}
	
	private static void getAllFileList(File directory, List<File> filelist) {
		File[] files = directory.listFiles();
		if (files != null) {
			for (int i = 0; i < files.length; i++) {
				String fileName = files[i].getName();
				if (files[i].isDirectory()) {
					getAllFileList(files[i], filelist); 
				} else if(fileName.endsWith(SMALI)){ 
					filelist.add(files[i]);
				} else {
					continue;
				}
			}

		}
	}
	
	private static void getFileList(File directory, List<File> filelist, String content) {
		File[] files = directory.listFiles();
		if (files != null) {
			for (int i = 0; i < files.length; i++) {
				String fileName = files[i].getName();
				if (files[i].isDirectory()) {
					getFileList(files[i], filelist, content); 
				} else if (fileName.contains(TRUST_MANAGER)) { 
					filelist.add(files[i]);
				} else {
					continue;
				}
			}

		}
	}
	
	public String getClientTmVulnerability() {
		return tmClientVulnerable;
	}
	
	public String getServerTmVulnerability() {
		return tmServerVulnerable;
	}
}
