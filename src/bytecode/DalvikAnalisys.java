package bytecode;

import org.jf.baksmali.*;
import util.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class DalvikAnalisys {
	
	private static String directory = null; 
	private static boolean tmpDir = true;
	private static File root = null;
	
	private static List<File> filelist = new ArrayList<File>();
	
	//Variabili per le vulnerabilità sul TrustManager
	private static String tmClientVulnerable = null; //vulnerabilità sul cerificato del client 
	private static String tmServerVulnerable = null; //vulnerabilità sul certificato del server
	private static String tmFileName = null; 		 //file in cui si trova la vulerabilità
	
	public DalvikAnalisys(File dexClass, String packageName, String decompilerDir) throws IOException {
		
		if(decompilerDir == null) directory = System.getProperty("java.io.tmpdir")+"/smali/" + packageName; 
		else {directory = decompilerDir; tmpDir = false;}
		
		//Qui parte baksmali che converte il dex in smali
		String[] smaliArgs = {"-o", directory, dexClass.getPath().toString()};
		main.main(smaliArgs);
		System.out.println("Decompilation of dex file finished");
		System.out.println("Beginning of analisys");
		
		root = new File(directory);
		
	}
	
	public void checkVulnerabilities() {
		
		Smali.getSmaliFileList(root, filelist);
		if(filelist.isEmpty()) {
			System.out.println("Class named TrustManager not found...");
			System.out.println("Beginning all file analysis...");
			Smali.getAllSmaliFileList(root,filelist);
		}
		for (File file : filelist) {
			try {
				BufferedReader reader = new BufferedReader(new FileReader(file));
				String line;
				boolean[] checked = {false , false};
				while ((line = reader.readLine()) != null) {
					if(line.contains(Const.SERVER_FUNCTION) && !checked[0]) {
						tmServerVulnerable = searchTmVulnerabilities(reader);
						tmFileName = file.getPath();
						checked[0] = true;
					}
					else if(line.contains(Const.CLIENT_FUNCTION) && !checked[1]) {
						tmClientVulnerable = searchTmVulnerabilities(reader);
						checked[1] = true;
					}
				}
				reader.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		if(tmpDir) Smali.removeTmpFile(filelist, root);
		System.out.println("Analysis ended, Showing result...");
		if(tmServerVulnerable == null) tmServerVulnerable = Const.NOT_VULNERABLE;
		if(tmClientVulnerable == null) tmClientVulnerable = Const.NOT_VULNERABLE;
		return;
	}
	
	private String searchTmVulnerabilities(BufferedReader reader) throws IOException {
		String line;
		while(!(line = reader.readLine()).equals(Const.END)) {
			if(line.contains(Const.GOTO)) {
				String tmp;
				BufferedReader ap = reader;
				tmp = ap.readLine();
				if(tmp.contains(Const.VOID)) return Const.MAYBE;
			}
			else if (line.contains(Const.VOID)) return Const.VULNERABLE;
		}
		return Const.NOT_VULNERABLE;
	}
	
	public String getClientTmVulnerability() {
		return tmClientVulnerable;
	}
	
	public String getServerTmVulnerability() {
		return tmServerVulnerable;
	}
	
	public String getTmClass(){
		return tmFileName;
	}
}
