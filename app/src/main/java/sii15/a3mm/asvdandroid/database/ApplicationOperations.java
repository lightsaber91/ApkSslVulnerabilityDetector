package sii15.a3MM.ASVDAndroid.database;

/**
 * Created by Mattia on 16/06/2015.
 */
import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;

public class ApplicationOperations {

    // Database fields
    private DataBaseWrapper dbHelper;
    private String[] APPLICATION_TABLE_COLUMNS = { DataBaseWrapper.ID_COLUMN, DataBaseWrapper.APP_VERSION_COLUMN  ,DataBaseWrapper.PACKAGE_NAME_COLUMN };
    private String[] GENERIC_TABLE = {DataBaseWrapper.APP_ID_COLUMN, DataBaseWrapper.CLASS_COLUMN, DataBaseWrapper.RESULT_COLUMN};

    private SQLiteDatabase database;

    public ApplicationOperations(Context context) {
        dbHelper = new DataBaseWrapper(context);
    }

    public void open() throws SQLException {
        database = dbHelper.getWritableDatabase();
    }

    public void close() {
        dbHelper.close();
    }

    public Application addApplication (String version, String packageName) {
        ContentValues values = new ContentValues();

        values.put(DataBaseWrapper.APP_VERSION_COLUMN, version);
        values.put(DataBaseWrapper.PACKAGE_NAME_COLUMN, packageName);

        long appId = database.insert(DataBaseWrapper.APP_TABLE, null, values);

        // now that the student is created return it ...
        Cursor cursor = database.query(DataBaseWrapper.APP_TABLE,
               APPLICATION_TABLE_COLUMNS, DataBaseWrapper.ID_COLUMN + " = "
                        + appId, null, null, null, null);

        cursor.moveToFirst();
        Application newComment = parseApplication(cursor);
        cursor.close();
        return newComment;
    }

    public HostNameVerifier addHostNameVerifier (long id, String cl, String result ) {
        ContentValues values = new ContentValues();
        values.put(DataBaseWrapper.CLASS_COLUMN, cl);
        values.put(DataBaseWrapper.RESULT_COLUMN, result);

        long objId = database.insert(DataBaseWrapper.HOSTNAMEVERIFIER_TABLE,null, values);

        Cursor cursor = database.query(DataBaseWrapper.HOSTNAMEVERIFIER_TABLE,
                GENERIC_TABLE,DataBaseWrapper.APP_ID_COLUMN + " = "
                         + objId, null, null, null, null);

        cursor.moveToFirst();
        HostNameVerifier newComment = parseHostNameVerifier(cursor);
        cursor.close();
        return newComment;
    }

    public TrustManager addTrustManager (long id, String cl, String result ) {
        ContentValues values = new ContentValues();

        values.put(DataBaseWrapper.APP_ID_COLUMN, id);
        values.put(DataBaseWrapper.CLASS_COLUMN, cl);
        values.put(DataBaseWrapper.RESULT_COLUMN, result);

        long objId = database.insert(DataBaseWrapper.TRUSTMANAGER_TABLE, null, values);

        Cursor cursor = database.query(DataBaseWrapper.TRUSTMANAGER_TABLE,
                GENERIC_TABLE,DataBaseWrapper.APP_ID_COLUMN + " = "
                        + objId, null, null, null, null);

        cursor.moveToFirst();
        TrustManager newComment = parseTrustManager(cursor);
        cursor.close();
        return newComment;
    }

    public AllowAllHostName addAllowAllHostName (long id, String cl, String result ) {
        ContentValues values = new ContentValues();
        values.put(DataBaseWrapper.CLASS_COLUMN, cl);
        values.put(DataBaseWrapper.RESULT_COLUMN, result);

        long objId = database.insert(DataBaseWrapper.ALLOWALLHOSTNAME_TABLE,null, values);

        Cursor cursor = database.query(DataBaseWrapper.ALLOWALLHOSTNAME_TABLE,
                GENERIC_TABLE,DataBaseWrapper.APP_ID_COLUMN + " = "
                        + objId, null, null, null, null);

        cursor.moveToFirst();
        AllowAllHostName newComment = parseAllowAllHostName(cursor);
        cursor.close();
        return newComment;
    }

    public SslHandlerError addSslHandlerError(long id, String cl, String result ) {
        ContentValues values = new ContentValues();
        values.put(DataBaseWrapper.CLASS_COLUMN, cl);
        values.put(DataBaseWrapper.RESULT_COLUMN, result);

        long objId = database.insert(DataBaseWrapper.SSLHANDLERERROR_TABLE,null, values);

        Cursor cursor = database.query(DataBaseWrapper.SSLHANDLERERROR_TABLE,
                GENERIC_TABLE,DataBaseWrapper.APP_ID_COLUMN + " = "
                        + objId, null, null, null, null);

        cursor.moveToFirst();
        SslHandlerError newComment = parseSslHandlerError(cursor);
        cursor.close();
        return newComment;
    }

    public void deleteApplication(Application app) {
        long id = app.getId();
        System.out.println("Comment deleted with id: " + id);
        database.delete(DataBaseWrapper.APP_TABLE, DataBaseWrapper.ID_COLUMN
                + " = " + id, null);
    }

    public List getAllApplications() {
        List apps = new ArrayList();

        Cursor cursor = database.query(DataBaseWrapper.APP_TABLE,
                APPLICATION_TABLE_COLUMNS, null, null, null, null, null);

        cursor.moveToFirst();

        while (!cursor.isAfterLast()) {
            Application app = parseApplication(cursor);
            apps.add(app);
            cursor.moveToNext();
        }
        cursor.close();
        return apps;
    }

    public List getAllTrustManager() {
        List trs = new ArrayList();

        Cursor cursor = database.query(DataBaseWrapper.TRUSTMANAGER_TABLE,
                GENERIC_TABLE, null, null, null, null, null);

        cursor.moveToFirst();

        while (!cursor.isAfterLast()) {
            TrustManager tr = parseTrustManager(cursor);
            trs.add(tr);
            cursor.moveToNext();
        }
        cursor.close();
        return trs;

    }

    public List getAllAllHostaNAmeVerifier() {
        List trs = new ArrayList();

        Cursor cursor = database.query(DataBaseWrapper.HOSTNAMEVERIFIER_TABLE,
                GENERIC_TABLE, null, null, null, null, null);

        cursor.moveToFirst();

        while (!cursor.isAfterLast()) {
            HostNameVerifier tr = parseHostNameVerifier(cursor);
            trs.add(tr);
            cursor.moveToNext();
        }
        cursor.close();
        return trs;

    }

    public List getAllAllowAllHostName() {
        List trs = new ArrayList();

        Cursor cursor = database.query(DataBaseWrapper.HOSTNAMEVERIFIER_TABLE,
                GENERIC_TABLE, null, null, null, null, null);

        cursor.moveToFirst();

        while (!cursor.isAfterLast()) {
            AllowAllHostName tr = parseAllowAllHostName(cursor);
            trs.add(tr);
            cursor.moveToNext();
        }
        cursor.close();
        return trs;
    }

    public List getAllSslErrorHandler() {
        List trs = new ArrayList();

        Cursor cursor = database.query(DataBaseWrapper.HOSTNAMEVERIFIER_TABLE,
                GENERIC_TABLE, null, null, null, null, null);

        cursor.moveToFirst();

        while (!cursor.isAfterLast()) {
            SslHandlerError tr = parseSslHandlerError(cursor);
            trs.add(tr);
            cursor.moveToNext();
        }
        cursor.close();
        return trs;
    }


    private Application parseApplication(Cursor cursor) {
        Application app = new Application();
        app.setId((cursor.getInt(0)));
        app.setVersion(cursor.getString(1));
        app.setPackage(cursor.getString(2));
        return app;
    }

    private HostNameVerifier parseHostNameVerifier(Cursor cursor) {
        HostNameVerifier obj = new HostNameVerifier();
        obj.setId((cursor.getInt(0)));
        obj.setvClass(cursor.getString(1));
        obj.setResult(cursor.getString(2));
        return obj;
    }

    private TrustManager parseTrustManager(Cursor cursor) {
        TrustManager obj = new TrustManager();
        obj.setId((cursor.getInt(0)));
        obj.setvClass(cursor.getString(1));
        obj.setResult(cursor.getString(2));
        return obj;
    }

    private AllowAllHostName parseAllowAllHostName (Cursor cursor) {
        AllowAllHostName obj = new AllowAllHostName();
        obj.setId((cursor.getInt(0)));
        obj.setvClass(cursor.getString(1));
        obj.setResult(cursor.getString(2));
        return obj;
    }

    private SslHandlerError parseSslHandlerError(Cursor cursor) {
        SslHandlerError obj = new SslHandlerError();
        obj.setId((cursor.getInt(0)));
        obj.setvClass(cursor.getString(1));
        obj.setResult(cursor.getString(2));
        return obj;
    }
}
