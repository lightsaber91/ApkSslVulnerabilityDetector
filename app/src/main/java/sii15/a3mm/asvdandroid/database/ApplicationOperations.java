package sii15.a3MM.ASVDAndroid.database;

/**
 * Created by Mattia on 16/06/2015.
 */
import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;

import sii15.a3MM.ASVDAndroid.utils.*;

public class ApplicationOperations {

    // Database fields
    private DataBaseWrapper dbHelper;
    private String[] APPLICATION_TABLE_COLUMNS = { DataBaseWrapper.ID_COLUMN, DataBaseWrapper.APP_VERSION_COLUMN  ,DataBaseWrapper.PACKAGE_NAME_COLUMN };
    private String[] GENERIC_TABLE = {DataBaseWrapper.APP_ID_COLUMN, DataBaseWrapper.CLASS_COLUMN, DataBaseWrapper.RESULT_COLUMN};
    private String[] AA_TABLE = {DataBaseWrapper.APP_ID_COLUMN, DataBaseWrapper.CLASS_COLUMN};

    private SQLiteDatabase database;

    public ApplicationOperations(Context context) {
        dbHelper = new DataBaseWrapper(context);
    }

    public void open() throws SQLException {
        database = dbHelper.getWritableDatabase();
    }

    public void close() {
        dbHelper.close();
    }

    public void saveApp(Apk app) {
        ContentValues values = new ContentValues();

        values.put(DataBaseWrapper.APP_VERSION_COLUMN, app.getPackageVersion());
        values.put(DataBaseWrapper.PACKAGE_NAME_COLUMN, app.getPackageName());

        long appId = database.insert(DataBaseWrapper.APP_TABLE, null, values);
        for (TrustManagerError trust : app.getTME()) {
            addTrustManager(appId, trust.getClasses(), trust.getVuln());
        }
        for (HostnameVerifierError host : app.getHVE()) {
            addHostNameVerifier(appId, host.getClasses(), host.getVuln());
        }
        for (AllowAllHostnameError allow : app.getAAE()) {
            addAllowAllHostName(appId, allow.getClasses());
        }
        for (SslHandlerError ssl : app.getSSLE()) {
            addSslHandlerError(appId, ssl.getClasses(), ssl.getVuln());
        }
    }

    public void addApplication (String version, String packageName) {
        ContentValues values = new ContentValues();

        values.put(DataBaseWrapper.APP_VERSION_COLUMN, version);
        values.put(DataBaseWrapper.PACKAGE_NAME_COLUMN, packageName);

        long appId = database.insert(DataBaseWrapper.APP_TABLE, null, values);

    }

    public void addHostNameVerifier (long id, String cl, String result ) {
        ContentValues values = new ContentValues();
        values.put(DataBaseWrapper.APP_ID_COLUMN, id);
        values.put(DataBaseWrapper.CLASS_COLUMN, cl);
        values.put(DataBaseWrapper.RESULT_COLUMN, result);

        long objId = database.insert(DataBaseWrapper.HOSTNAMEVERIFIER_TABLE,null, values);

    }

    public void addTrustManager (long id, String cl, String result ) {
        ContentValues values = new ContentValues();

        values.put(DataBaseWrapper.APP_ID_COLUMN, id);
        values.put(DataBaseWrapper.CLASS_COLUMN, cl);
        values.put(DataBaseWrapper.RESULT_COLUMN, result);

        long objId = database.insert(DataBaseWrapper.TRUSTMANAGER_TABLE, null, values);
    }

    public void addAllowAllHostName (long id, String cl ) {
        ContentValues values = new ContentValues();
        values.put(DataBaseWrapper.APP_ID_COLUMN, id);
        values.put(DataBaseWrapper.CLASS_COLUMN, cl);

        long objId = database.insert(DataBaseWrapper.ALLOWALLHOSTNAME_TABLE,null, values);
    }

    public void addSslHandlerError(long id, String cl, String result ) {
        ContentValues values = new ContentValues();
        values.put(DataBaseWrapper.APP_ID_COLUMN, id);
        values.put(DataBaseWrapper.CLASS_COLUMN, cl);
        values.put(DataBaseWrapper.RESULT_COLUMN, result);

        long objId = database.insert(DataBaseWrapper.SSLHANDLERERROR_TABLE,null, values);
     }

    public Apk checkIfPresent(String pk, String version) {
        Apk app;
        String whereClause = "pk = ? AND version = ?";
        String[] whereArgs = new String[] {pk, version};
        Cursor cursor = database.query(DataBaseWrapper.APP_TABLE, APPLICATION_TABLE_COLUMNS, whereClause, whereArgs, null, null, null);

        if(cursor.getCount() == 0)
            return null;
        cursor.moveToFirst();
        app = parseApplication(cursor);
        cursor.close();
        app.setTME(getTrustManagerByApp(app.getId()));
        app.setHVE(getAllHostaNAmeVerifierByApp(app.getId()));
        app.setAAE(getAllowAllHostNameByApp(app.getId()));
        app.setSSLE(getSslErrorHandlerByApp(app.getId()));
        return app;

    }

    public List getTrustManagerByApp(long id) {
        List<TrustManagerError> trs = new ArrayList();
        String whereClause = "idApp = ?";
        String[] whereArgs = new String[] {Long.toString(id)};
        Cursor cursor = database.query(DataBaseWrapper.TRUSTMANAGER_TABLE,
                GENERIC_TABLE, whereClause, whereArgs, null, null, null);

        cursor.moveToFirst();

        while (!cursor.isAfterLast()) {
            TrustManagerError tr = parseTrustManager(cursor);
            trs.add(tr);
            cursor.moveToNext();
        }
        cursor.close();
        return trs;

    }

    public List getAllHostaNAmeVerifierByApp(long id) {
        List<HostnameVerifierError> trs = new ArrayList();

        String whereClause = "idApp = ?";
        String[] whereArgs = new String[] {Long.toString(id)};
        Cursor cursor = database.query(DataBaseWrapper.HOSTNAMEVERIFIER_TABLE,
                GENERIC_TABLE, whereClause, whereArgs, null, null, null);
        cursor.moveToFirst();

        while (!cursor.isAfterLast()) {
            HostnameVerifierError tr = parseHostNameVerifier(cursor);
            trs.add(tr);
            cursor.moveToNext();
        }
        cursor.close();
        return trs;

    }

    public List getAllowAllHostNameByApp(long id) {
        List<AllowAllHostnameError> trs = new ArrayList();

        String whereClause = "idApp = ?";
        String[] whereArgs = new String[] {Long.toString(id)};
        Cursor cursor = database.query(DataBaseWrapper.ALLOWALLHOSTNAME_TABLE,
                AA_TABLE, whereClause, whereArgs, null, null, null);

        cursor.moveToFirst();

        while (!cursor.isAfterLast()) {
            AllowAllHostnameError tr = parseAllowAllHostName(cursor);
            trs.add(tr);
            cursor.moveToNext();
        }
        cursor.close();
        return trs;
    }

    public List getSslErrorHandlerByApp(long id) {
        List<SslHandlerError> trs = new ArrayList();

        String whereClause = "idApp = ?";
        String[] whereArgs = new String[] {Long.toString(id)};
        Cursor cursor = database.query(DataBaseWrapper.SSLHANDLERERROR_TABLE,
                GENERIC_TABLE, whereClause, whereArgs, null, null, null);

        cursor.moveToFirst();

        while (!cursor.isAfterLast()) {
            SslHandlerError tr = parseSslHandlerError(cursor);
            trs.add(tr);
            cursor.moveToNext();
        }
        cursor.close();
        return trs;
    }


    private Apk parseApplication(Cursor cursor) {
        Apk app = new Apk();
        app.setId((cursor.getInt(0)));
        app.setPackageVersion(cursor.getString(1));
        app.setPackageName(cursor.getString(2));
        return app;
    }

    private HostnameVerifierError parseHostNameVerifier(Cursor cursor) {
        HostnameVerifierError obj = new HostnameVerifierError();
        obj.setClasses(cursor.getString(1));
        obj.setVuln(cursor.getString(2));
        return obj;
    }

    private TrustManagerError parseTrustManager(Cursor cursor) {
        TrustManagerError obj = new TrustManagerError();
        obj.setClasses(cursor.getString(1));
        obj.setVuln(cursor.getString(2));
        return obj;
    }

    private AllowAllHostnameError parseAllowAllHostName (Cursor cursor) {
        AllowAllHostnameError obj = new AllowAllHostnameError();
        obj.setClasses(cursor.getString(1));
        return obj;
    }

    private SslHandlerError parseSslHandlerError(Cursor cursor) {
        SslHandlerError obj = new SslHandlerError();
        obj.setClasses(cursor.getString(1));
        obj.setVuln(cursor.getString(2));
        return obj;
    }
}
