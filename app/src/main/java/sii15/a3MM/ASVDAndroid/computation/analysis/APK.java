package sii15.a3MM.ASVDAndroid.computation.analysis;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.ParserConfigurationException;

import sii15.a3MM.ASVDAndroid.computation.malScanner.mScanner;

import org.xml.sax.SAXException;
import org.xmlpull.v1.XmlPullParserException;

import sii15.a3MM.ASVDAndroid.computation.util.OpenApkFile;;
/**
 * 
 * @author Simone Martucci
 * @author Mattia Mancini
 * 
 */
public class APK {
	/**
	 * @param apkFile: object that contains the entire APK app
	 */
	private OpenApkFile apkFile = null;
	
	/**
	 * This contructor create new apk file and get the file permission,
	 * the package name and the package version
	 * 
	 * @param path: location of the APK
	 * @throws XmlPullParserException 
	 */
	public APK(String path, mScanner scanner) throws IOException, ParserConfigurationException, SAXException, XmlPullParserException {
		apkFile = new OpenApkFile(path);
		apkFile.ReadManifest(scanner);
	}
	
	/**
	 * @return package name of APK
	 */
	public String getPackage() {
		return apkFile.getPackageName();
	}
	
	/**
	 * @return package version of APK
	 */
	public String getVersion() {
		return apkFile.getPackageVersion();
	}
	
	/**
	 * @return true if internet permission required, false otherwise
	 */
	public boolean getPermssion() {
		return apkFile.getInternetPermission();
	}
	
	public boolean getMalwareCall() {
		return apkFile.getMalwareCall();
	}
	
	public boolean getMalwareSms() {
		return apkFile.getMalwareSms();
	}
	
	public boolean getMalwareOutgoing() {
		return apkFile.getMalwareOutgoing();
	}
	
	/**
	 * close the apk file
	 * @throws IOException
	 */
	public void close() throws IOException {
		apkFile.close();
	}
	
	/**
	 * @return classes.dex file contained in APK
	 * @throws IOException
	 */
	public File getDexFile() throws IOException {
		return apkFile.getDexFile();
	}
	
}
