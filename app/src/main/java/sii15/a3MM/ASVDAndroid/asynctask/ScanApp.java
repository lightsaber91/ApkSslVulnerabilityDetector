package sii15.a3MM.ASVDAndroid.asynctask;

import android.os.AsyncTask;
import android.support.v4.app.FragmentActivity;

import com.gc.materialdesign.widgets.ProgressDialog;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.xmlpull.v1.XmlPullParserException;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import sii15.a3MM.ASVDAndroid.activity.OptionsFragment;
import sii15.a3MM.ASVDAndroid.activity.ResultsFragment;
import sii15.a3MM.ASVDAndroid.computation.ASVD.ASVD;
import sii15.a3MM.ASVDAndroid.database.ApplicationOperations;
import sii15.a3MM.ASVDAndroid.model.*;

public class ScanApp extends AsyncTask<Void, Void, Void> {

    private FragmentActivity activity;
    private ProgressDialog loading;
    private String p;
    private String n;
    private Apk app;
    private ApplicationOperations onDb = null;
    private boolean scan = false;

    public ScanApp(FragmentActivity fragmentActivity, String path, String name, ApplicationOperations db) {
        activity = fragmentActivity;
        p = path;
        n = name;
        app = new Apk();
        onDb = db;
        scan = OptionsFragment.getScanOption();
    }

    @Override
    protected void onPreExecute() {
        loading = new ProgressDialog(activity, "Scanning the selected APK...");
        loading.show();
    }

    @Override
    protected Void doInBackground(Void... params) {

        try {
            if(scan)
                ASVD.main(new String[]{"-f", p, "-s", "-x", n});
            else
                ASVD.main(new String[]{"-f", p, "-x", n});
            parseXmlResult(n);
        } catch (IOException | ParserConfigurationException | XmlPullParserException | SAXException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    protected void onPostExecute(Void v) {
        onDb.saveApp(app);
        new SaveOnRemoteDb(app).execute();
        loading.dismiss();
        ResultsFragment.createView(app);
        //save on remote db
    }

    private boolean parseXmlResult(String name) throws ParserConfigurationException, SAXException, IOException {
        File fXmlFile = new File(System.getProperty("java.io.tmpdir") + File.separator + name + ".xml");
        //se il file non esiste la scansione Ã¨ fallita
        if(!fXmlFile.exists()) return false;
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        Document doc = dBuilder.parse(fXmlFile);

        //optional, but recommended
        doc.getDocumentElement().normalize();
        //parsing package and version of app
        app.setPackageName(doc.getDocumentElement().getAttribute("package"));
        app.setPackageVersion(doc.getDocumentElement().getAttribute("version"));

        //trust manager vulnerabilities
        NodeList tm = doc.getElementsByTagName("TrustManagers");
        NodeList tmchilds = tm.item(0).getChildNodes();
        for(int tmp = 0; tmp < tmchilds.getLength(); tmp++) {
            Node node = tmchilds.item(tmp);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                Element el = (Element) node;
                TrustManagerError tmptm = new TrustManagerError();
                tmptm.setClasses(el.getAttribute("class"));
                tmptm.setVuln(el.getAttribute("status"));
                app.addTME(tmptm);
            }
        }

        //hostname verifier
        NodeList hn = doc.getElementsByTagName("HostnameVerifiers");
        NodeList hnchilds = hn.item(0).getChildNodes();
        for(int tmp = 0; tmp < hnchilds.getLength(); tmp++) {
            Node node = hnchilds.item(tmp);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                Element el = (Element) node;
                if(el.getTagName().equals("allowAllHostnames")) {
                    AllowAllHostnameError al = new AllowAllHostnameError();
                    al.setClasses(el.getAttribute("class"));
                    app.addAAE(al);
                }
                else {
                    HostnameVerifierError hv = new HostnameVerifierError();
                    hv.setClasses(el.getAttribute("class"));
                    hv.setVuln(el.getAttribute("status"));
                    app.addHVE(hv);
                }
            }
        }
        NodeList ssl = doc.getElementsByTagName("SslHandlerErrors");
        NodeList sslchilds = ssl.item(0).getChildNodes();
        for(int tmp = 0; tmp < sslchilds.getLength(); tmp++) {
            Node node = sslchilds.item(tmp);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                Element el = (Element) node;
                SslHandlerError se = new SslHandlerError();
                se.setClasses(el.getAttribute("class"));
                se.setVuln(el.getAttribute("status"));
                app.addSSLE(se);
            }
        }
        if(scan) {
            NodeList malware = doc.getElementsByTagName("Malware");
            NodeList malChilds = malware.item(0).getChildNodes();
            for (int tmp = 0; tmp < malChilds.getLength(); tmp++) {
                Node node = malChilds.item(tmp);
                if (node.getNodeType() == Node.ELEMENT_NODE) {
                    Element el = (Element) node;
                    if (el.getTagName().equals("PermissionScore"))
                        app.setpScore(Float.parseFloat(el.getAttribute("score")));
                    else if (el.getTagName().equals("IntentServiceScore"))
                        app.setIfScore(Float.parseFloat(el.getAttribute("score")));
                }
            }
        }
        return true;
    }
}
