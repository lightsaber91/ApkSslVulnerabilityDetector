package sii15.a3MM.ASVDAndroid.asynctask;

import android.os.AsyncTask;
import android.support.v4.app.FragmentActivity;
import android.util.Log;

import com.gc.materialdesign.widgets.ProgressDialog;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import sii15.a3MM.ASVDAndroid.activity.ResultsFragment;
import sii15.a3MM.ASVDAndroid.database.ApplicationOperations;
import sii15.a3MM.ASVDAndroid.model.*;

/**
 * Created by Mattia on 22/06/2015.
 */
public class CheckRemoteDb extends AsyncTask<Void, Void, Void> {

    private FragmentActivity activity;
    private ProgressDialog loading;
    private String pack;
    private String ver;
    private String path;
    private String name;
    private Apk app = null;
    private ApplicationOperations onDb = null;
    private InputStream is = null;
    private String result = null;
    private String line = null;

    public CheckRemoteDb(FragmentActivity fragmentActivity, String pk, String version, String p, String n, ApplicationOperations db) {
        activity = fragmentActivity;
        pack = pk;
        ver = version;
        onDb = db;
        path = p;
        name = n;
    }

    @Override
    protected void onPreExecute() {
        loading = new ProgressDialog(activity, "Check on Db");
        loading.show();
    }

    @Override
    protected Void doInBackground(Void... params) {
        try {
            HttpClient httpclient = new DefaultHttpClient();
            String req = "http://android-sslvulnerability.rhcloud.com/pull?pkg="+pack+"&ver="+ver;
            HttpGet httpget = new HttpGet(req);
            HttpResponse response = httpclient.execute(httpget);
            HttpEntity entity = response.getEntity();
            is = entity.getContent();
        } catch (Exception e) {
            Log.e("error connection", e.toString());
            return null;
        }
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, "iso-8859-1"), 8);
            StringBuilder sb = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
            is.close();
            result = sb.toString();
        } catch (Exception e) {
            Log.e("error connection 2", e.toString());
            return null;
        }
        try {
            JSONObject json_data = new JSONObject(result);
            app = new Apk();
            app.setPackageName(json_data.getString("pkg"));
            app.setPackageVersion(json_data.getString("version"));
            JSONArray arraytm = (JSONArray) json_data.get("tm");
            List<TrustManagerError> tm = new ArrayList<TrustManagerError>();
            for(int i=0; i<arraytm.length(); i++) {
                JSONObject ap = new JSONObject(arraytm.getString(i));
                TrustManagerError tmp = new TrustManagerError();
                tmp.setClasses(ap.getString("classes"));
                tmp.setVuln(ap.getString("vuln"));
                tm.add(tmp);
            }
            app.setTME(tm);
            JSONArray arrayhv = (JSONArray) json_data.get("hv");
            List<HostnameVerifierError> hv = new ArrayList<HostnameVerifierError>();
            for(int i=0; i<arrayhv.length(); i++) {
                JSONObject ap = new JSONObject(arrayhv.getString(i));
                HostnameVerifierError tmp = new HostnameVerifierError();
                tmp.setClasses(ap.getString("classes"));
                tmp.setVuln(ap.getString("vuln"));
                hv.add(tmp);
            }
            app.setHVE(hv);
            JSONArray arrayssl = (JSONArray) json_data.get("ssl");
            List<SslHandlerError> ssl = new ArrayList<SslHandlerError>();
            for(int i=0; i<arrayssl.length(); i++) {
                JSONObject ap = new JSONObject(arrayssl.getString(i));
                SslHandlerError tmp = new SslHandlerError();
                tmp.setClasses(ap.getString("classes"));
                tmp.setVuln(ap.getString("vuln"));
                ssl.add(tmp);
            }
            app.setSSLE(ssl);
            JSONArray arrayAa = (JSONArray) json_data.get("ah");
            List<AllowAllHostnameError> ah = new ArrayList<AllowAllHostnameError>();
            for(int i=0; i<arrayAa.length(); i++) {
                JSONObject ap = new JSONObject(arrayAa.getString(i));
                AllowAllHostnameError tmp = new AllowAllHostnameError();
                tmp.setClasses(ap.getString("classes"));
                ah.add(tmp);
            }
            app.setAAE(ah);
        } catch (JSONException e) {
            app = null;
            Log.e("error parsing json", e.toString());
            return null;
        }
        return null;
    }

    @Override
    protected void onPostExecute(Void v) {
        loading.dismiss();
        if(app != null) {
            onDb.saveApp(app);
            ResultsFragment.createView(app);
        }
        else {
            new ScanApp(activity, path, name, onDb).execute();
        }
    }
}
