package sii15.a3MM.ASVDAndroid.activity;

import android.graphics.Color;
import android.os.Bundle;
import android.provider.CalendarContract;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import android.widget.Toast;

import com.ms.square.android.expandabletextview.ExpandableTextView;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.xmlpull.v1.XmlPullParserException;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ExecutionException;

import javax.net.ssl.HostnameVerifier;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import sii15.a3MM.ASVDAndroid.R;
import sii15.a3MM.ASVDAndroid.asynctask.ScanApp;
import sii15.a3MM.ASVDAndroid.computation.ASVD.ASVD;
import sii15.a3MM.ASVDAndroid.utils.AllowAllHostnameError;
import sii15.a3MM.ASVDAndroid.utils.Apk;
import sii15.a3MM.ASVDAndroid.utils.HostnameVerifierError;
import sii15.a3MM.ASVDAndroid.utils.SslHandlerError;
import sii15.a3MM.ASVDAndroid.utils.TrustManagerError;


public class ResultsFragment extends Fragment {

    private static Apk app = null;
    static FragmentActivity activity;
    static View rootView;

    public ResultsFragment() {
        // Required empty public constructor
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        rootView =inflater.inflate(R.layout.fragment_results, container, false);

        return rootView;

    }

    @Override
    public void onActivityCreated (Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        app = new Apk();

        activity = getActivity();
        Bundle b = getArguments();
        String path = b.getString("path");
        String tempName = b.getString("name");
        String name = tempName.replaceAll("\\s+","");
        Log.d("resultFrag", name);

        new ScanApp(activity,path,name,app).execute();

       // String temp = app.getPackageName();
        //Log.d("funge", temp);

    }

    public static void createView() {
        ExpandableTextView expTv1 = (ExpandableTextView) rootView.findViewById(R.id.sample1)
                .findViewById(R.id.expand_text_view);
        ExpandableTextView expTv2 = (ExpandableTextView) rootView.findViewById(R.id.sample2)
                .findViewById(R.id.expand_text_view);
        ExpandableTextView expTv3 = (ExpandableTextView) rootView.findViewById(R.id.sample3)
                .findViewById(R.id.expand_text_view);
        ExpandableTextView expTv4 = (ExpandableTextView) rootView.findViewById(R.id.sample4)
                .findViewById(R.id.expand_text_view);

        expTv1.setOnExpandStateChangeListener(new ExpandableTextView.OnExpandStateChangeListener() {
            @Override
            public void onExpandStateChanged(TextView textView, boolean isExpanded) {
                Toast.makeText(activity, isExpanded ? "Expanded" : "Collapsed", Toast.LENGTH_SHORT).show();
            }
        });

        String pk = app.getPackageName();
        String version = app.getPackageVersion();
        List<TrustManagerError> tm = app.getTME();
        List<HostnameVerifierError> hv = app.getHVE();
        List<AllowAllHostnameError> aah = app.getAAE();
        List<SslHandlerError> ssh = app.getSSLE();

        String tmString = "";
        if(tm.isEmpty()) {
            tmString = "No Vulnerable Trust Manager";
        }
        else {
            for (TrustManagerError trust : tm) {
                tmString += "- " + trust.getClasses() + "\n" + "  " + trust.getVuln() + "\n";
            }
        }

        String hvString = "";
        if(hv.isEmpty()) {
            hvString = "No Vulnerable HostName Verifier";
        }
        else {
            for (HostnameVerifierError host : hv) {
                hvString += "- " + host.getClasses() + "\n" + "  " + host.getVuln() + "\n";
            }
        }

        String aahString = "";
        if(aah.isEmpty()) {
            aahString = "No ALLOW ALL HOSTNAME found";
        }
        else {
            for (AllowAllHostnameError allow : aah) {
                aahString += "- " + allow.getClasses() + "\n";
            }
        }

        String sslString = "";
        if(ssh.isEmpty()) {
            sslString = "No Vulnerable SSL Error Handler";
        }
        else {
            for (SslHandlerError ssl : ssh) {
                sslString += "- " + ssl.getClasses() + "\n" + "  " + ssl.getVuln() + "\n";
            }
        }


        expTv1.setText(tmString);
        expTv2.setText(hvString);
        expTv3.setText(aahString);
        expTv4.setText(sslString);

    }

}
