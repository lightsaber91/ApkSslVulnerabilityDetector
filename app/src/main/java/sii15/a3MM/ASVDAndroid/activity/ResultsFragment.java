package sii15.a3MM.ASVDAndroid.activity;

import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.ms.square.android.expandabletextview.ExpandableTextView;

import java.util.List;

import sii15.a3MM.ASVDAndroid.R;
import sii15.a3MM.ASVDAndroid.asynctask.CheckRemoteDb;
import sii15.a3MM.ASVDAndroid.database.ApplicationOperations;
import sii15.a3MM.ASVDAndroid.model.*;


public class ResultsFragment extends Fragment {

    static FragmentActivity activity;
    static View rootView;
    static ApplicationOperations appsDBoperation;

    public ResultsFragment() {
        // Required empty public constructor
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        rootView =inflater.inflate(R.layout.fragment_results, container, false);

        return rootView;

    }

    @Override
    public void onActivityCreated (Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);

        activity = getActivity();
        Bundle b = getArguments();
        String path = b.getString("path");
        String tempName = b.getString("name");
        String name = tempName != null ? tempName.replaceAll("\\s+", "") : null;
        String version = b.getString("version");
        String pk = b.getString("package");
        Log.d("resultFrag", name);

        appsDBoperation = new ApplicationOperations(activity);
        appsDBoperation.open();
        Apk app = appsDBoperation.checkIfPresent(pk, version);
        if(app != null) {
            createView(app);
        }
        else {
            new CheckRemoteDb(activity, pk, version, path, name, appsDBoperation).execute();
        }
    }

    public static void createView(Apk app) {
        ExpandableTextView expTv1 = (ExpandableTextView) rootView.findViewById(R.id.sample1)
                .findViewById(R.id.expand_text_view);
        ExpandableTextView expTv2 = (ExpandableTextView) rootView.findViewById(R.id.sample2)
                .findViewById(R.id.expand_text_view);
        ExpandableTextView expTv3 = (ExpandableTextView) rootView.findViewById(R.id.sample3)
                .findViewById(R.id.expand_text_view);
        ExpandableTextView expTv4 = (ExpandableTextView) rootView.findViewById(R.id.sample4)
                .findViewById(R.id.expand_text_view);
        ExpandableTextView expTv5 = (ExpandableTextView) rootView.findViewById(R.id.sample5)
                .findViewById(R.id.expand_text_view);

        expTv1.setOnExpandStateChangeListener(new ExpandableTextView.OnExpandStateChangeListener() {
            @Override
            public void onExpandStateChanged(TextView textView, boolean isExpanded) {
                //Toast.makeText(activity, isExpanded ? "Expanded" : "Collapsed", Toast.LENGTH_SHORT).show();
            }
        });

        //String pk = app.getPackageName();
        //String version = app.getPackageVersion();
        List<TrustManagerError> tm = app.getTME();
        List<HostnameVerifierError> hv = app.getHVE();
        List<AllowAllHostnameError> aah = app.getAAE();
        List<SslHandlerError> ssh = app.getSSLE();

        String tmString = "";
        if(tm.isEmpty()) {
            tmString = "No Vulnerable Trust Manager";
        }
        else {
            for (TrustManagerError trust : tm) {
                tmString += "- " + trust.getClasses() + "\n" + "  " + trust.getVuln() + "\n";
            }
        }

        String hvString = "";
        if(hv.isEmpty()) {
            hvString = "No Vulnerable HostName Verifier";
        }
        else {
            for (HostnameVerifierError host : hv) {
                hvString += "- " + host.getClasses() + "\n" + "  " + host.getVuln() + "\n";
            }
        }

        String aahString = "";
        if(aah.isEmpty()) {
            aahString = "No ALLOW ALL HOSTNAME found";
        }
        else {
            for (AllowAllHostnameError allow : aah) {
                aahString += "- " + allow.getClasses() + "\n";
            }
        }

        String sslString = "";
        if(ssh.isEmpty()) {
            sslString = "No Vulnerable SSL Error Handler";
        }
        else {
            for (SslHandlerError ssl : ssh) {
                sslString += "- " + ssl.getClasses() + "\n" + "  " + ssl.getVuln() + "\n";
            }
        }

        expTv1.setText(tmString);
        expTv2.setText(hvString);
        expTv3.setText(aahString);
        expTv4.setText(sslString);

        String result=null;
        if(OptionsFragment.getScanOption()) {
            float permission = app.getpScore();
            float intent = app.getIfScore();
            if(permission >0 && intent >=0.3) result = "Apk file is very suspicius";
            else if (permission > 0 || intent >= 0.5) result = "Apk file is suspicius";
            else result="Apk is safe";
            expTv5.setText(result);
        }
        else expTv5.setText("Malware scanner disabled");
    }

}
